/*
** YUNI's default license is the GNU Lesser Public License (LGPL), with some
** exclusions (see below). This basically means that you can get the full source
** code for nothing, so long as you adhere to a few rules.
**
** Under the LGPL you may use YUNI for any purpose you wish, and modify it if you
** require, as long as you:
**
** Pass on the (modified) YUNI source code with your software, with original
** copyrights intact :
**  * If you distribute electronically, the source can be a separate download
**    (either from your own site if you modified YUNI, or to the official YUNI
**    website if you used an unmodified version) â€“ just include a link in your
**    documentation
**  * If you distribute physical media, the YUNI source that you used to build
**    your application should be included on that media
** Make it clear where you have customised it.
**
** In addition to the LGPL license text, the following exceptions / clarifications
** to the LGPL conditions apply to YUNI:
**
**  * Making modifications to YUNI configuration files, build scripts and
**    configuration headers such as yuni/platform.h in order to create a
**    customised build setup of YUNI with the otherwise unmodified source code,
**    does not constitute a derived work
**  * Building against YUNI headers which have inlined code does not constitute a
**    derived work
**  * Code which subclasses YUNI classes outside of the YUNI libraries does not
**    form a derived work
**  * Statically linking the YUNI libraries into a user application does not make
**    the user application a derived work.
**  * Using source code obsfucation on the YUNI source code when distributing it
**    is not permitted.
** As per the terms of the LGPL, a "derived work" is one for which you have to
** distribute source code for, so when the clauses above define something as not
** a derived work, it means you don't have to distribute source code for it.
** However, the original YUNI source code with all modifications must always be
** made available.
*/
#ifndef __CPP_PARSER_JSON_TABLE_HXX__
# define __CPP_PARSER_JSON_TABLE_HXX__

// Generated by grammar-converter


# include <yuni/yuni.h>


namespace Grammar
{
namespace Private
{
namespace JSON
{


	struct GrammarInfos
	{
		//! Initial DFA state
		const uint initialDFAState;
		//! Initial LALR state
		const uint initialLALRState;

		//! Symbols
		const struct {
			const uint count;
			const Symbols::Entry* table;
		} symbols;
		//! Charsets
		const struct {
			const uint count;
			const Charset::Entry* table;
		} charsets;
		//! Productions
		const struct {
			const uint count;
			const Productions::Entry* table;
		} productions;
		//! DFA states
		const struct {
			const uint count;
			const DFA::Entry* table;
		} dfa;
		//! LALR states
		const struct {
			const uint count;
			const LALR::Entry* table;
		} lalr;
	};


	static const GrammarInfos grammar = 
	{
		// initial states
		   0, // initial DFA state
		   0, // initial LALR state

		// symbols
		{
			Symbols::count,
			Symbols::table,
		},
		// charsets
		{
			Charset::count,
			Charset::table,
		},
		// productions
		{
			Productions::count,
			Productions::table,
		},
		// dfa
		{
			DFA::count,
			DFA::table,
		},
		// lalr
		{
			LALR::count,
			LALR::table,
		},
	};





} // namespace JSON
} // namespace Private
} // namespace Grammar

#endif // __CPP_PARSER_JSON_TABLE_HXX__
